require('dotenv').config();
const { Bot, GrammyError, HttpError, InlineKeyboard, InputFile } = require("grammy");
const texts = require('./text');

const bot = new Bot(process.env.BOT_API_KEY);

const inlineKeyboard = new InlineKeyboard()
    .text('–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ‚òéÔ∏è', 'lesson')
    .row()
    .text('–û–Ω–ª–∞–π–Ω –∫—É—Ä—Å üéì', 'course')
    .row()
    .text('–ü–æ—Å–ª—É—à–∞—é –≤–∞—à —Ç—Ä–µ–∫ üéß', 'feedback');

bot.command("start", async (ctx) =>
    await ctx.reply(texts.text_start,
        {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
            reply_markup: inlineKeyboard,
        },
    ));

bot.on("message", (ctx) => ctx.reply("–û–π, —è –ø–æ–∫–∞ —Ç–∞–∫ –Ω–µ —É–º–µ—é ü§ì"));

bot.callbackQuery('course', async (ctx) => {
    await ctx.answerCallbackQuery()
    await ctx.reply(texts.course,
        {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
        },
    )
});

const consult = new InlineKeyboard()
    .url('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é', 'https://t.me/xrisvavrzhina')
    .row()
    .text('< –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back');

bot.callbackQuery('lesson', async (ctx) => {
    await ctx.answerCallbackQuery()
    await ctx.reply(texts.consult,
        { reply_markup: consult, }
    );
});

const feedback = new InlineKeyboard()
    .url('–ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–¥–±–µ–∫', 'https://t.me/xrisvavrzhina')
    .row()
    .text('< –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back');

bot.callbackQuery('lesson', async (ctx) => {
    await ctx.answerCallbackQuery()
    await ctx.reply(texts.feedback,
        { reply_markup: feedback, }
    );
});


const get_guide = new InlineKeyboard()
    .text('–ó–∞–±—Ä–∞—Ç—å –≥–∞–π–¥', 'getguide')
    .row()
    .text('< –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back');

bot.callbackQuery('guide', async (ctx) => {
    await ctx.answerCallbackQuery()
    await ctx.reply('–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≥–∞–π–¥',
        { reply_markup: get_guide, }
    );

});

bot.callbackQuery('getguide', async (ctx) => {
    // Replace with the path to your PDF file
    await ctx.answerCallbackQuery('–ì–∞–π–¥ –æ–±—ä–µ–º–Ω—ã–π! –ù–∞–¥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å ü§è');
    const pdfPath = new InputFile("./files/guide.pdf");

    await ctx.replyWithDocument(pdfPath);
});


bot.catch((err) => {
    const ctx = err.ctx;
    console.error(`Error while handling update ${ctx.update.update_id}:`); const e = err.error;
    if (e instanceof GrammyError) {
        console.error('Error in request:', e.description);
    } else if (e instanceof HttpError) {
        console.error('Could not contact Telegram:', e);
    } else {
        console.error('Unknown error:', e);
    }
});

bot.api.setMyCommands([
    { command: 'start', description: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞' },
]);



bot.command('inline_keyboard', async (ctx) => {
    await ctx.reply('–ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å —É –º–µ–Ω—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –ø–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥ –∏–ª–∏ –∫—É–ø–∏—Ç—å –∫—É—Ä—Å, –Ω–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:', {
        reply_markup: inlineKeyboard,
    });
});

bot.start();
