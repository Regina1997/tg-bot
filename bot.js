require('dotenv').config();
const { Bot, GrammyError, HttpError, InlineKeyboard, InputFile } = require("grammy");
const texts = require('./text');
//import fs from "fs/promises";

const bot = new Bot(process.env.BOT_API_KEY);

const inlineKeyboard = new InlineKeyboard()
    .text('–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ‚òéÔ∏è', 'lesson')
    .row()
    .text('–û–Ω–ª–∞–π–Ω –∫—É—Ä—Å üéì', 'course')
    .row()
    .text('–ü–æ—Å–ª—É—à–∞—é –≤–∞—à —Ç—Ä–µ–∫ üéß', 'feedback')
    .row()
    .text('–ó–∞–±—Ä–∞—Ç—å –≥–∞–π–¥ üéÅ', 'getguide');

bot.command("start", async (ctx) =>
    await ctx.reply(texts.text_start,
        {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
            reply_markup: inlineKeyboard,
        },
    ));

bot.on("message", (ctx) => ctx.reply("–û–π, —è –ø–æ–∫–∞ —Ç–∞–∫ –Ω–µ —É–º–µ—é ü§ì"));

bot.callbackQuery('course', async (ctx) => {
    await ctx.answerCallbackQuery()
    await ctx.reply(texts.course,
        {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
        },
    )
});

const consult = new InlineKeyboard()
    .url('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é', 'https://t.me/xrisvavrzhina')
    .row()
    .text('< –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back');

bot.callbackQuery('lesson', async (ctx) => {
    await ctx.answerCallbackQuery()
    await ctx.reply(texts.consult,
        { reply_markup: consult, }
    );
});

const feedback = new InlineKeyboard()
    .url('–ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–¥–±–µ–∫', 'https://t.me/xrisvavrzhina')
    .row()
    .text('< –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back');

bot.callbackQuery('feedback', async (ctx) => {
    await ctx.answerCallbackQuery()
    await ctx.reply(texts.feedback,
        { reply_markup: feedback, }
    );
});

const get_guide = new InlineKeyboard()
    .text('–ó–∞–±—Ä–∞—Ç—å –≥–∞–π–¥', 'getguide')
    .row()
    .text('< –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back');

bot.callbackQuery('guide', async (ctx) => {
    await ctx.answerCallbackQuery()
    await ctx.reply('–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≥–∞–π–¥',
        { reply_markup: get_guide, }
    );

});

bot.callbackQuery('getguide', async (ctx) => {
    // Replace with the path to your PDF file
    await ctx.answerCallbackQuery('–ì–∞–π–¥ –æ–±—ä–µ–º–Ω—ã–π! –ù–∞–¥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å ü§è');
    const pdfPath = new InputFile("./files/3 —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫–∏ —Å–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞.pdf");

    await ctx.replyWithDocument(pdfPath);
});

function sendStartMessage(ctx) {       
    return ctx.reply(texts.text_start,
        {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
            reply_markup: inlineKeyboard,
        },
    );
}

bot.callbackQuery('back', async (ctx) => {
    await ctx.answerCallbackQuery()
    await sendStartMessage(ctx);
});


bot.catch((err) => {
    const ctx = err.ctx;
    console.error(`Error while handling update ${ctx.update.update_id}:`); const e = err.error;
    if (e instanceof GrammyError) {
        console.error('Error in request:', e.description);
    } else if (e instanceof HttpError) {
        console.error('Could not contact Telegram:', e);
    } else {
        console.error('Unknown error:', e);
    }
});

bot.api.setMyCommands([
    { command: 'start', description: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞' },
]);



bot.command('inline_keyboard', async (ctx) => {
    await ctx.reply('–ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å —É –º–µ–Ω—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –ø–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥ –∏–ª–∏ –∫—É–ø–∏—Ç—å –∫—É—Ä—Å, –Ω–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:', {
        reply_markup: inlineKeyboard,
    });
});


/*const loadPromoCodes = async () => {
    try {
      const data = await fs.readFile("promo_codes.json", "utf-8");
      return JSON.parse(data);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:", err);
      return { promo_codes: {} };
    }
  };
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã –≤ —Ñ–∞–π–ª
  const savePromoCodes = async (data) => {
    try {
      await fs.writeFile("promo_codes.json", JSON.stringify(data, null, 2));
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:", err);
    }
  };
  
  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
  bot.command("getpromo", async (ctx) => {
    const userId = ctx.from.id;
  
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    const data = await loadPromoCodes();
  
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ–º–æ–∫–æ–¥
    if (!data.user_promos) {
      data.user_promos = {};
    }
    if (data.user_promos[userId]) {
      return ctx.reply(`–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥: ${data.user_promos[userId]}`);
    }
  
    // –ò—â–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
    const availableCode = Object.keys(data.promo_codes).find(
      (code) => !data.promo_codes[code].is_used
    );
  
    if (!availableCode) {
      return ctx.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã —É–∂–µ –≤—ã–¥–∞–Ω—ã.");
    }
  
    // –ü–æ–º–µ—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    data.promo_codes[availableCode].is_used = true;
    data.user_promos[userId] = availableCode;
  
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await savePromoCodes(data);
  
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    ctx.reply(`–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: ${availableCode}`);
  });*/

bot.start();
